选项1：移动脚本
	将脚本放在关闭正文标签之前(</body>标签前)，通常被认为是最好的做法

选项2：jQuery的 ready()
	$(document).ready(function(){})

选项3：事件委托
	当一个元素引发一个事件（前提是它是一个冒泡事件，并且没有任何东西停止其传播），那个元素祖先中的每个父进程也接收该事件。
	这样我们可以将一个处理程序附加到一个现有的元素上，并且在它们从后代中冒出来的样本事件之后，甚至在处理程序被附加后添加。
	我们所要做的就是检查事件是否被所需元素引发，如果是，请运行我们的代码。jQuery on()为我们执行这个逻辑。我们只需提供一个事件名称，
	一个所需后代的选择器和一个事件

选项4：defer属性
	[ defer，布尔属性]被设置为向浏览器指示在解析文档之后该脚本将被执行。

<script async src="script.js"></script>
有 async，加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。

<script defer src="myscript.js"></script>
有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后
，DOMContentLoaded 事件触发之前完成。