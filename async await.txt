async后面直接返回一个promise对象, 可以用then和cache来处理.
await后面是一个promise对象, 如果不是, 会转成一个resolve的promise对象.
await后面的promise如果reject, 则会被catch接收到, 写不写return都可以, 且reject下面的代码不会被执行. 如果异步操作失败, 也不想中断后面的操作, 可将await放在try catch结构中, 另一种方法是await后面的promise对象再跟一个catch.
1. async function f() {
	try {
		await Promise.reject('出错了');
	} catch(e) {}
	return await Promise.resolve('hello world')
}
2. async function f() {
	await Promise.reject('出错了')
	  .catch(e => console.error(e));
	return await Promise.resolve('hello world');
}

如果多个await不存在继发关系, 最好让它们同时触发
1. let [foo, bar] = await Promise.all([getFoo(), getBar()]);
2. let fooPromise = getFoo();
let barPromise = getBar();
let foo = await fooPromise;
let bar = await barPromise;